Problem1
import.java.util.*;
public class hw61 {
public interface Map<K,V> {
	int size( );
 	boolean isEmpty( );
 	V get(K key);
 	V put(K key, V value);
 	V remove(K key);
 	Iterable<K> keySet( );
 	Iterable<V> values( );
 	Iterable<Entry<K,V>> entrySet( );
 }

 public abstract class AbstractMap<K,V> implements Map<K,V> {
 	public boolean isEmpty( ) { 
      return size( ) == 0;
    }
 	protected class MapEntry<K,V> implements Entry<K,V> {
 		private K k; 
 		private V v; 
 	public MapEntry(K key, V value) {
 		k = key;
		v = value;
 	}

 	public K getKey( ) {
      return k; 
    }
 	public V getValue( ) {
      return v; 
    }
 
 	protected void setKey(K key) { 
      k = key; 
    }
 	protected V setValue(V value) {
 		V old = v;
 		v = value;
 		return old;
  }
 } 

 	private class KeyIterator implements Iterator<K> {
	 private Iterator<Entry<K,V>> entries = entrySet( ).iterator( ); 
 		public boolean hasNext( ) {
          return entries.hasNext( ); 
        }
 		public K next( ) { 
          return entries.next( ).getKey( ); 
        } 
 		public void remove( ) {
          throw new UnsupportedOperationException( ); 
        }
 		}
		private class KeyIterable implements Iterable<K> {
 		public Iterator<K> iterator( ) {
          return new KeyIterator( ); 
        }
	 }
 	public Iterable<K> keySet( ) {
      return new KeyIterable( ); 
    }


 	private class ValueIterator implements Iterator<V> {
 		private Iterator<Entry<K,V>> entries = entrySet( ).iterator( ); 
 		public boolean hasNext( ) {
          return entries.hasNext( ); 
        }
 	public V next( ) {
      return entries.next( ).getValue( ); 
    } 
 	public void remove( ) { 
      throw new UnsupportedOperationException( ); 
    }
 }
 	private class ValueIterable implements Iterable<V> {
 		public Iterator<V> iterator( ) {
          return new ValueIterator( ); 
        }
 }
 	public Iterable<V> values( ) {
      return new ValueIterable( ); 
    }
 }
  public static void main(String[] args){
  }
}
Sorted
public class SortedTableMap<K,V> extends AbstractSortedMap<K,V> {
 	private ArrayList<MapEntry<K,V>> table = new ArrayList<>( );
 	public SortedTableMap( ) {
      super( ); 
    }
 	public SortedTableMap(Comparator<K> comp) {
      super(comp);
    }
 
 	private int findIndex(K key, int low, int high) {
 		if (high < low) return high + 1; 
		int mid = (low + high) / 2;
 		int comp = compare(key, table.get(mid));
 		if (comp == 0)
 		return mid; 
 		else if (comp < 0)
 		return findIndex(key, low, mid − 1); 
 		else
 		return findIndex(key, mid + 1, high); 
 	}
 
 		private int findIndex(K key) {
          return findIndex(key, 0, table.size( ) − 1); 
        }

 		public int size( ) { 
          return table.size( ); 
        }
 
 		public V get(K key) {
 		int j = findIndex(key);
 		if (j == size( ) || compare(key, table.get(j)) != 0) return null; // no match
 		return table.get(j).getValue( );
 	}

	 public V put(K key, V value) {
	 int j = findIndex(key);
	 if (j < size( ) && compare(key, table.get(j)) == 0) // match exists
	 return table.get(j).setValue(value);
	 table.add(j, new MapEntry<K,V>(key,value)); // otherwise new
 	return null;
 }

 	public V remove(K key) {
 	int j = findIndex(key);
 	if (j == size( ) || compare(key, table.get(j)) != 0) return null; // no match
   	return table.remove(j).getValue( );
}

 	private Entry<K,V> safeEntry(int j) {
 	if (j < 0 || j >= table.size( )) return null;
 	return table.get(j);
 }

	public Entry<K,V> firstEntry( ) {
      return safeEntry(0); }
 

	 public Entry<K,V> lastEntry( ) { return safeEntry(table.size( )−1); }
 	public Entry<K,V> ceilingEntry(K key) {
 	return safeEntry(findIndex(key));
 }
 
 	public Entry<K,V> floorEntry(K key) {
 	int j = findIndex(key);
 	if (j == size( ) || ! key.equals(table.get(j).getKey( )))
 		j−−; 
 	return safeEntry(j);
 	}
 
 	public Entry<K,V> lowerEntry(K key) {
 	return safeEntry(findIndex(key) − 1); // go strictly before the ceiling entry
 	}
 	public Entry<K,V> higherEntry(K key) {
		 int j = findIndex(key);
		 if (j < size( ) && key.equals(table.get(j).getKey( )))
 		j++; 
	return safeEntry(j);
 }

	 private Iterable<Entry<K,V>> snapshot(int startIndex, K stop) {
 	ArrayList<Entry<K,V>> buffer = new ArrayList<>( );
 	int j = startIndex;
 	while (j < table.size( ) && (stop == null || compare(stop, table.get(j)) > 0))
 	buffer.add(table.get(j++));
 	return buffer;
 	}
 	public Iterable<Entry<K,V>> entrySet( ) { return snapshot(0, null); }
 	public Iterable<Entry<K,V>> subMap(K fromKey, K toKey) {
 	return snapshot(findIndex(fromKey), toKey);
 	}
 }
B
public Map<String, Integer> wordCount(String[] strings) {
  Map<String, Integer> map = new HashMap<String, Integer> ();
  for (String s:strings) {
    
    if (!map.containsKey(s)) {  // first time we've seen this string
      map.put(s, 1);
    }
    else {
      int count = map.get(s);
      map.put(s, count + 1);
    }
  }
  return map;
}

